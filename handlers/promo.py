from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMINS
from database import add_promotion, remove_promotion, get_promotions
from keyboards.main_menu import get_main_menu
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F  # –ò—Å–ø–æ–ª—å–∑—É–µ–º F –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

router = Router()

class PromoState(StatesGroup):
    waiting_for_promo = State()

@router.message(F.text == "üí∞ –ê–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
async def show_promo(message: types.Message):
    promotions = get_promotions()
    if promotions:
        text = "üí∞ –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n" + "\n".join(promotions)
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π."
    await message.answer(text)

@router.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏")
async def admin_panel(message: types.Message):
    if message.from_user.id in ADMINS:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        buttons = [
            [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é")],
            [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ]
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def admin_cancel(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu(message.chat.id))

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é")
async def add_promo(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏:")
        await state.set_state(PromoState.waiting_for_promo)

@router.message(PromoState.waiting_for_promo)
async def receive_promo(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        add_promotion(message.text)
        await message.answer("‚úÖ –ê–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await state.clear()

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é")
async def remove_promo_menu(message: types.Message):
    if message.from_user.id in ADMINS:
        promotions = get_promotions()
        if not promotions:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        builder = InlineKeyboardBuilder()
        for promo in promotions:
            builder.button(text=promo, callback_data=f"deletepromo_{promo}")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@router.callback_query(lambda c: c.data.startswith("deletepromo_"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def remove_promo_callback(call: types.CallbackQuery):
    if call.from_user.id in ADMINS:
        promo_text = call.data.split("_")[1]
        remove_promotion(promo_text)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏
        await call.message.edit_text(f"‚úÖ –ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞: {promo_text}")