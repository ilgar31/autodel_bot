from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import add_chat_request, assign_admin_to_chat, save_non_working_hours_request, get_chat_request, end_chat, get_chat_request_for_admin, add_admin_notification, get_admin_notifications, delete_admin_notifications
from config import ADMINS
from keyboards.main_menu import get_main_menu
from aiogram import F
from datetime import datetime, time

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 8:00 –¥–æ 19:00)
WORK_START = time(8, 0)  # 8:00
WORK_END = time(19, 0)   # 19:00

def is_working_hours():
    now = datetime.now().time()
    return WORK_START <= now <= WORK_END

@router.message(F.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
async def request_chat(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞—Ç –ª–∏ —É–∂–µ –¥–∏–∞–ª–æ–≥
    if get_chat_request(user_id):
        await message.answer("‚ùå –í—ã —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è
    if not is_working_hours():
        await message.answer(
            "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, –¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç! –ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–∞–±–ª–∏—Ü—É non_working_hours_requests)
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        save_non_working_hours_request(user_id, message.from_user.username)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∞–ª–æ–≥
    add_chat_request(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
                                         resize_keyboard=True)
    await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è.", reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}")

    for admin_id in ADMINS:
        if not get_chat_request_for_admin(admin_id):
            sent_message = await message.bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.",
                reply_markup=builder.as_markup()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            add_admin_notification(admin_id, sent_message.message_id)

@router.callback_query(lambda c: c.data.startswith("accept_"))
async def accept_chat_request(call: types.CallbackQuery):
    admin_id = call.from_user.id
    user_id = int(call.data.split("_")[1])

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥
    assign_admin_to_chat(user_id, admin_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.bot.send_message(user_id, "‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞—à–µ–ª—Å—è! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")]], resize_keyboard=True)
    await call.bot.send_message(admin_id, f"‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", reply_markup=keyboard)
    await call.message.delete()

    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for other_admin_id in ADMINS:
        if other_admin_id != admin_id:
            message_ids = get_admin_notifications(other_admin_id)
            for message_id in message_ids:
                try:
                    await call.bot.delete_message(other_admin_id, message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {other_admin_id}: {e}")
            delete_admin_notifications(other_admin_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for other_admin_id in ADMINS:
        if other_admin_id != admin_id:
            await call.bot.send_message(other_admin_id, f"–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ –≤–µ–¥–µ—Ç –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.message(F.text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def end_chat_command(message: types.Message):
    user_id = message.from_user.id

    try:
        if user_id in ADMINS:
            admin_id = get_chat_request_for_admin(user_id)
            user_id, admin_id = admin_id, user_id
            end_chat(user_id)
            await message.bot.send_message(admin_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_menu(admin_id))
            await message.bot.send_message(user_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await message.bot.send_message(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=get_main_menu(user_id))
        else:
            admin_id = get_chat_request(user_id)
            if not admin_id:
                await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_menu(user_id))
                for admin_id in ADMINS:
                    message_ids = get_admin_notifications(admin_id)
                    for message_id in message_ids:
                        try:
                            await message.bot.delete_message(admin_id, message_id)
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
                    delete_admin_notifications(admin_id)
                return
            end_chat(user_id)
            await message.bot.send_message(admin_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await message.bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=get_main_menu(admin_id))
            await message.bot.send_message(user_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_main_menu(user_id))
    except:
        pass

@router.message(lambda message: get_chat_request(message.from_user.id))  # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–∏–∞–ª–æ–≥–µ
async def forward_message_from_user(message: types.Message):
    admin_id = get_chat_request(message.from_user.id)
    if admin_id:
        await message.bot.send_message(admin_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:\n{message.text}")

@router.message(lambda message: get_chat_request_for_admin(message.from_user.id))  # –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
async def forward_message_from_admin(message: types.Message):
    user_id = get_chat_request_for_admin(message.from_user.id)
    if user_id:
        await message.bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")